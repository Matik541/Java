Index: GetStarted/src/com/learn/ex2209.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.learn;\r\n\r\nimport java.util.*;\r\n\r\npublic class ex2209 {\r\n  public static void main(String[] args) {\r\n\r\n    // 1.\r\n    double[] array = new double[10];\r\n    for (int i = 0; i < array.length; i++)\r\n      array[i] = Math.sqrt(i);\r\n\r\n    System.out.println(Arrays.toString(array));\r\n\r\n    // 2.\r\n    int[] fibonacci = new int[40];\r\n    fibonacci[0] = 0;\r\n    fibonacci[1] = 1;\r\n    for (int i = 2; i < fibonacci.length; i++)\r\n      fibonacci[i] = fibonacci[i-1] + fibonacci[i-2];\r\n\r\n    System.out.println(Arrays.toString(fibonacci));\r\n\r\n    System.out.println(\"Enter the number to find nearest number from fibonnaci seqence: \");\r\n    Scanner keyboard = new Scanner(System.in);\r\n    int input = keyboard.nextInt();\r\n\r\n    int index = Arrays.binarySearch(fibonacci, input);\r\n    if (index < 0) {\r\n      index = -index - 1;\r\n      if (index == fibonacci.length)\r\n        System.out.println(\"Nearest number is: \" + fibonacci[index-1]);\r\n      else if (index == 0)\r\n        System.out.println(\"Nearest number is: \" + fibonacci[index]);\r\n      else {\r\n        int left = fibonacci[index-1];\r\n        int right = fibonacci[index];\r\n        System.out.println(\"Nearest number is: \" + ((input - left) < (right - input) ? left : right));\r\n      }\r\n    } else\r\n      System.out.println(\"Nearest number is: \" + fibonacci[index]);\r\n\r\n    // 3.\r\n    int[] random = new int[100];\r\n    for (int i = 0; i < random.length; i++)\r\n      random[i] = (int) (Math.random() * 100 + 1);\r\n    System.out.println(Arrays.toString(random));\r\n\r\n    List<Integer> evenList = new ArrayList<>();\r\n    List<Integer> oddList = new ArrayList<>();\r\n    for (int k : random) {\r\n      if (k % 2 == 0)\r\n        evenList.add(k);\r\n      else\r\n        oddList.add(k);\r\n    }\r\n\r\n    List<Integer> uniqueList = new ArrayList<>();\r\n    for (int k : random)\r\n      if (!uniqueList.contains(k))\r\n        uniqueList.add(k);\r\n\r\n    System.out.println(\"Even numbers: \" + evenList);\r\n    System.out.println(\"Odd numbers: \" + oddList);\r\n    System.out.println(\"Unique numbers: \" + uniqueList);\r\n    System.out.println(\"Count of unique numbers: \" + uniqueList.size());\r\n\r\n    // 4.\r\n    Arrays.sort(random);\r\n    System.out.println(\"Sorted array: \" + Arrays.toString(random));\r\n    double avg = 0;\r\n    for (int j : random)\r\n      avg += j;\r\n    avg /= random.length;\r\n    System.out.println(\"Average: \" + avg);\r\n    System.out.println(\"Mediana: \" + random[random.length/2]);\r\n\r\n    Map<Integer, Integer> frequency = new HashMap<>();\r\n    for (int value : random) {\r\n      if (frequency.containsKey(value))\r\n        frequency.put(value, frequency.get(value) + 1);\r\n      else\r\n        frequency.put(value, 1);\r\n    }\r\n    int max = 0;\r\n    for (int value : frequency.values())\r\n      if (value > max)\r\n        max = value;\r\n\r\n    System.out.println(\"Dominant: \" + max);\r\n\r\n\r\n    // 5.\r\n    boolean[] primaryArray = new boolean[1000];\r\n    Arrays.fill(primaryArray, true);\r\n    for (int i = 2; i < Math.sqrt(primaryArray.length); i++)\r\n      if (primaryArray[i])\r\n        for (int j = i * i; j < primaryArray.length; j += i)\r\n          primaryArray[j] = false;\r\n\r\n    System.out.println(\"Enter the starting number: \");\r\n    int start = keyboard.nextInt();\r\n    System.out.println(\"Enter the ending number: \");\r\n    int end = keyboard.nextInt();\r\n    for (int i = start; i <= end; i++)\r\n      if (primaryArray[i])\r\n        System.out.print(i + \" \");\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GetStarted/src/com/learn/ex2209.java b/GetStarted/src/com/learn/ex2209.java
--- a/GetStarted/src/com/learn/ex2209.java	(revision 7567ea6a6e5e0b08308219b8a139cbe5f1c20caa)
+++ b/GetStarted/src/com/learn/ex2209.java	(date 1663653016049)
@@ -25,20 +25,34 @@
     Scanner keyboard = new Scanner(System.in);
     int input = keyboard.nextInt();
 
-    int index = Arrays.binarySearch(fibonacci, input);
-    if (index < 0) {
-      index = -index - 1;
-      if (index == fibonacci.length)
-        System.out.println("Nearest number is: " + fibonacci[index-1]);
-      else if (index == 0)
-        System.out.println("Nearest number is: " + fibonacci[index]);
-      else {
-        int left = fibonacci[index-1];
-        int right = fibonacci[index];
-        System.out.println("Nearest number is: " + ((input - left) < (right - input) ? left : right));
+    //binary search for fibonacci sequence
+    int left = 0;
+    int right = fibonacci.length - 1;
+    int middle = (left + right) / 2;
+    while (left <= right) {
+      if (left == right){
+        if (fibonacci[left-1] > input)
+          System.out.println("Nearest number is: " + fibonacci[left-1]);
+        else
+          System.out.println("Nearest number is: " + fibonacci[left]);
+
+        break;
+      }
+
+      if (fibonacci[middle] < input) {
+        left = middle + 1;
+      } else if (fibonacci[middle] == input) {
+        System.out.println("Number " + input + " is in the sequence");
+        break;
+      } else {
+        right = middle - 1;
       }
-    } else
-      System.out.println("Nearest number is: " + fibonacci[index]);
+
+      middle = (left + right) / 2;
+    }
+
+    System.out.println("Nearest number is " + fibonacci[middle]);
+  }
 
     // 3.
     int[] random = new int[100];
@@ -55,10 +69,9 @@
         oddList.add(k);
     }
 
-    List<Integer> uniqueList = new ArrayList<>();
+    Set<Integer> uniqueList = new HashSet<>();
     for (int k : random)
-      if (!uniqueList.contains(k))
-        uniqueList.add(k);
+      uniqueList.add(k);
 
     System.out.println("Even numbers: " + evenList);
     System.out.println("Odd numbers: " + oddList);
